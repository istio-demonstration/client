apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app-original
spec:
  selector:
    matchLabels:
      app: web-app
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: web-app
        version: original
    spec:
      containers:
      - name: web-app
        # env:
        # - name: SPRING_PROFILES_ACTIVE
        #   value: production-microservice
        image: 839928622/client
        # pull image from remote server ?
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /
            port: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app-experimental
spec:
  selector:
    matchLabels:
      app: web-app
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: web-app
        version: experimental
    spec:
      containers:
      - name: web-app
        # env:
        # - name: SPRING_PROFILES_ACTIVE
        #   value: production-microservice
        image: 839928622/client
        # pull image from remote server ?
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /
            port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: web-app

spec:
  # This defines which pods are going to be represented by this Service
  # The service becomes a network endpoint for either other services
  # or maybe external users to connect to (eg browser)
  # minikube start --extra-config=apiserver.service-node-port-range=80-30000,
  # port 80 can be used as well
  selector:
    app: web-app

  ports:
    - name: http
      port: 80

  type: ClusterIP
